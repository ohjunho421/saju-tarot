{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 기본 구조 구축",
        "description": "React, TypeScript, TailwindCSS, shadcn/ui를 사용하여 프로젝트 기본 구조를 설정하고 개발 환경을 구성합니다.",
        "details": "1. Vite를 사용하여 React + TypeScript 프로젝트 생성\n2. TailwindCSS 설치 및 구성\n3. shadcn/ui 컴포넌트 라이브러리 설정\n4. 프로젝트 폴더 구조 설정 (pages, components, hooks, utils, types, services)\n5. ESLint, Prettier 설정\n6. Git 저장소 초기화 및 .gitignore 설정\n7. 기본 라우팅 구성 (React Router)\n8. 상태 관리 라이브러리 설치 (Zustand)\n9. 환경 변수 설정 (.env 파일)",
        "testStrategy": "1. 개발 서버 실행 및 기본 페이지 로드 확인\n2. 컴포넌트 스타일링 테스트\n3. 라우팅 기능 테스트\n4. 상태 관리 기본 기능 테스트\n5. 환경 변수 접근 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "백엔드 기본 구조 설정",
        "description": "Node.js, Express.js, TypeScript를 사용하여 백엔드 API 서버의 기본 구조를 설정합니다.",
        "details": "1. Node.js + Express.js + TypeScript 프로젝트 초기화\n2. 폴더 구조 설정 (controllers, routes, models, services, middleware)\n3. 기본 미들웨어 설정 (CORS, body-parser, error handling)\n4. 환경 변수 설정 (dotenv)\n5. 로깅 시스템 구현 (winston 또는 pino)\n6. 기본 헬스체크 엔드포인트 구현\n7. TypeScript 타입 정의 파일 구성\n8. 개발용 hot-reload 설정 (nodemon)\n9. ESLint, Prettier 설정",
        "testStrategy": "1. 서버 실행 테스트\n2. 헬스체크 엔드포인트 응답 확인\n3. 미들웨어 동작 테스트\n4. 로깅 시스템 테스트\n5. 환경 변수 로드 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "데이터베이스 모델 설계 및 구현",
        "description": "PRD에 정의된 데이터 모델에 따라 MongoDB 또는 PostgreSQL 데이터베이스 스키마를 설계하고 ORM을 구성합니다.",
        "details": "1. 데이터베이스 선택 (MongoDB 또는 PostgreSQL)\n2. ORM 설정 (Prisma 또는 Mongoose)\n3. User 모델 구현\n4. SajuAnalysis 모델 구현\n5. TarotReading 모델 구현\n6. TarotCard 모델 구현\n7. 관계 설정 (외래 키 등)\n8. 인덱스 설정\n9. 마이그레이션 스크립트 작성\n10. 시드 데이터 준비 (특히 타로 카드 데이터)",
        "testStrategy": "1. 데이터베이스 연결 테스트\n2. CRUD 작업 테스트\n3. 관계 쿼리 테스트\n4. 마이그레이션 테스트\n5. 시드 데이터 로드 테스트",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "사용자 인증 시스템 구현",
        "description": "JWT를 사용한 사용자 등록, 로그인, 인증 시스템을 구현합니다.",
        "details": "1. 사용자 등록 API 엔드포인트 구현\n2. 로그인 API 엔드포인트 구현\n3. JWT 토큰 생성 및 검증 로직 구현\n4. 비밀번호 해싱 (bcrypt)\n5. 인증 미들웨어 구현\n6. 토큰 갱신 메커니즘\n7. 로그아웃 기능\n8. 프론트엔드 인증 상태 관리 (Zustand)\n9. 보호된 라우트 구현 (React Router)\n10. 로컬 스토리지 또는 쿠키 기반 토큰 저장",
        "testStrategy": "1. 사용자 등록 테스트\n2. 로그인/로그아웃 테스트\n3. 토큰 검증 테스트\n4. 보호된 라우트 접근 테스트\n5. 토큰 만료 및 갱신 테스트\n6. 비밀번호 해싱 보안 테스트",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "사용자 정보 입력 UI 구현",
        "description": "사용자의 생년월일, 생시, 성별 등을 입력받는 단계별 폼 UI를 구현합니다.",
        "details": "1. 단계별 폼 컴포넌트 설계\n2. 생년월일 입력 (양력/음력 선택 포함)\n3. 생시 입력 (시간 선택기)\n4. 성별 선택 UI\n5. 폼 유효성 검사\n6. 진행률 표시 UI\n7. 날짜/시간 처리를 위한 date-fns 또는 dayjs 통합\n8. 폼 상태 관리\n9. 반응형 디자인 적용\n10. 접근성 고려 (ARIA 속성, 키보드 네비게이션)",
        "testStrategy": "1. 폼 입력 유효성 검사 테스트\n2. 단계별 네비게이션 테스트\n3. 날짜/시간 입력 정확성 테스트\n4. 반응형 디자인 테스트\n5. 접근성 테스트\n6. 다양한 브라우저 호환성 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "사주 만세력 계산 알고리즘 구현",
        "description": "사용자 생년월일시를 기반으로 사주 만세력을 계산하는 알고리즘을 구현합니다.",
        "details": "1. 음양력 변환 라이브러리 통합 (korean-lunar-calendar)\n2. 천간(天干) 계산 로직 구현\n3. 지지(地支) 계산 로직 구현\n4. 십신(十神) 분석 로직 구현\n5. 오행(五行) 균형 분석 로직 구현\n6. 대운/세운 계산 로직 구현\n7. 사주 데이터 구조 정의\n8. 계산 결과 캐싱 메커니즘\n9. 오류 처리 및 예외 상황 대응\n10. 계산 성능 최적화",
        "testStrategy": "1. 알려진 사주 데이터로 계산 정확성 검증\n2. 음양력 변환 테스트\n3. 경계값 테스트 (윤년, 특수 날짜)\n4. 성능 테스트\n5. 오류 처리 테스트\n6. 다양한 생년월일 케이스 테스트",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "타로 카드 데이터베이스 구축",
        "description": "메이저 아르카나 22장과 마이너 아르카나 56장의 타로 카드 데이터베이스를 구축합니다.",
        "details": "1. 타로 카드 데이터 모델 구현\n2. 메이저 아르카나 22장 데이터 입력\n3. 마이너 아르카나 56장 데이터 입력\n4. 각 카드별 이미지 URL, 정방향/역방향 의미, 키워드 등 정보 포함\n5. 오행 속성 매핑 (목-Wands, 화-Cups, 토-Pentacles, 금-Swords, 수-물 관련 메이저 카드)\n6. 카드 데이터 시드 스크립트 작성\n7. 카드 이미지 최적화 및 저장\n8. 카드 검색 및 필터링 기능 구현\n9. 카드 관계 데이터 구조화 (상호 연관성)",
        "testStrategy": "1. 데이터 무결성 테스트\n2. 카드 검색 및 필터링 테스트\n3. 이미지 로드 테스트\n4. 오행 매핑 정확성 테스트\n5. 데이터 모델 관계 테스트",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "타로 카드 UI 및 인터랙션 구현",
        "description": "타로 카드 선택, 셔플, 스프레드 배치를 위한 UI 및 인터랙션을 구현합니다.",
        "details": "1. 카드 컴포넌트 디자인\n2. 카드 셔플 애니메이션 (Framer Motion 활용)\n3. 카드 선택 인터랙션\n4. 카드 뒤집기 애니메이션\n5. 다양한 스프레드 레이아웃 구현:\n   - 원 카드 스프레드\n   - 쓰리 카드 스프레드 (과거-현재-미래)\n   - 켈트 십자가 스프레드\n   - 사주 맞춤형 스프레드\n6. 카드 상세 보기 모달\n7. 드래그 앤 드롭 기능 (선택적)\n8. 반응형 레이아웃 조정\n9. 터치 인터랙션 최적화",
        "testStrategy": "1. 애니메이션 성능 테스트\n2. 다양한 화면 크기에서의 레이아웃 테스트\n3. 터치 및 마우스 인터랙션 테스트\n4. 다양한 스프레드 레이아웃 테스트\n5. 접근성 테스트",
        "priority": "medium",
        "dependencies": [
          1,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "사주 차트 시각화 구현",
        "description": "사주 분석 결과를 시각적으로 표현하는 차트와 그래픽을 구현합니다.",
        "details": "1. 사주 팔자 차트 컴포넌트 구현\n2. 오행 밸런스 차트 구현 (레이더 차트 또는 바 차트)\n3. 천간/지지 시각화\n4. 십신 분석 결과 시각화\n5. 대운/세운 타임라인 시각화\n6. 차트 라이브러리 통합 (Chart.js, D3.js 또는 Recharts)\n7. 인터랙티브 요소 추가 (호버, 클릭 시 상세 정보)\n8. 반응형 차트 레이아웃\n9. 차트 테마 및 스타일링\n10. 차트 데이터 포맷팅 유틸리티",
        "testStrategy": "1. 차트 렌더링 정확성 테스트\n2. 다양한 데이터 케이스에 대한 시각화 테스트\n3. 반응형 레이아웃 테스트\n4. 인터랙션 테스트\n5. 성능 테스트 (대량의 데이터 처리)",
        "priority": "medium",
        "dependencies": [
          1,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "AI 해석 엔진 통합",
        "description": "OpenAI GPT-4 또는 Anthropic Claude API를 활용하여 사주와 타로 카드 해석을 위한 AI 엔진을 통합합니다.",
        "details": "1. OpenAI 또는 Anthropic API 클라이언트 설정\n2. 사주 해석을 위한 프롬프트 엔지니어링\n3. 타로 카드 해석을 위한 프롬프트 엔지니어링\n4. 사주와 타로 통합 해석을 위한 프롬프트 설계\n5. API 응답 파싱 및 포맷팅\n6. 에러 처리 및 재시도 메커니즘\n7. 응답 캐싱 시스템 구현\n8. 토큰 사용량 모니터링 및 최적화\n9. 비용 효율적인 API 호출 전략\n10. 백엔드 API 엔드포인트 구현",
        "testStrategy": "1. 다양한 사주 및 타로 조합에 대한 해석 테스트\n2. 프롬프트 품질 평가\n3. 응답 일관성 테스트\n4. 에러 처리 테스트\n5. 캐싱 효율성 테스트\n6. 응답 시간 및 성능 테스트",
        "priority": "high",
        "dependencies": [
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "사주-타로 통합 해석 알고리즘 개발",
        "description": "사주 분석 결과와 타로 카드 리딩을 연결하여 통합된 해석을 생성하는 알고리즘을 개발합니다.",
        "details": "1. 오행과 타로 카드 속성 매핑 로직 구현\n2. 사주의 강약점과 타로 카드 의미 연결\n3. 십신과 타로 카드 상징 연관성 분석\n4. 대운/세운과 타로 스프레드 포지션 연결\n5. 통합 해석 템플릿 설계\n6. 맞춤형 조언 생성 로직\n7. 해석 결과 구조화 및 포맷팅\n8. 해석 품질 향상을 위한 규칙 설정\n9. 사용자 질문에 따른 해석 조정\n10. AI 응답과 템플릿 기반 해석의 조화",
        "testStrategy": "1. 다양한 사주-타로 조합에 대한 해석 테스트\n2. 해석의 일관성 및 정확성 평가\n3. 오행-타로 매핑 검증\n4. 해석 품질 평가 (전문가 리뷰)\n5. 다양한 사용자 질문에 대한 응답 테스트",
        "priority": "high",
        "dependencies": [
          6,
          7,
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "결과 페이지 UI 구현",
        "description": "사주와 타로 통합 해석 결과를 시각적으로 아름답게 표시하는 결과 페이지 UI를 구현합니다.",
        "details": "1. 결과 페이지 레이아웃 디자인\n2. 사주 차트 섹션 구현\n3. 타로 스프레드 섹션 구현\n4. 통합 해석 텍스트 섹션 구현\n5. 조언 및 행동 지침 섹션 구현\n6. 결과 공유 버튼 구현\n7. PDF/이미지 저장 기능 구현\n8. 애니메이션 및 트랜지션 효과\n9. 반응형 레이아웃 조정\n10. 프린트 스타일 최적화",
        "testStrategy": "1. 다양한 해석 결과에 대한 레이아웃 테스트\n2. 반응형 디자인 테스트\n3. PDF/이미지 저장 기능 테스트\n4. 공유 기능 테스트\n5. 다양한 브라우저 호환성 테스트\n6. 접근성 테스트",
        "priority": "medium",
        "dependencies": [
          8,
          9,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "히스토리 및 저장 기능 구현",
        "description": "사용자의 과거 리딩 기록을 저장하고 관리하는 기능을 구현합니다.",
        "details": "1. 리딩 결과 저장 API 구현\n2. 히스토리 목록 조회 API 구현\n3. 히스토리 상세 조회 API 구현\n4. 히스토리 삭제 API 구현\n5. 히스토리 목록 UI 구현\n6. 날짜별 필터링 기능 구현\n7. 검색 기능 구현\n8. 즐겨찾기 기능 구현\n9. 히스토리 비교 기능 구현\n10. 로컬 스토리지 백업 기능 (선택적)",
        "testStrategy": "1. 저장 및 조회 기능 테스트\n2. 필터링 및 검색 기능 테스트\n3. 즐겨찾기 기능 테스트\n4. 비교 기능 테스트\n5. 대량의 히스토리 데이터 처리 성능 테스트\n6. 사용자별 데이터 분리 테스트",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "일간/주간/월간 운세 기능 구현",
        "description": "사용자의 사주를 기반으로 일간, 주간, 월간 운세를 제공하는 기능을 구현합니다.",
        "details": "1. 일간 운세 계산 알고리즘 구현\n2. 주간 운세 계산 알고리즘 구현\n3. 월간 운세 계산 알고리즘 구현\n4. 현재 날짜 기준 운세 계산 로직\n5. 특정 날짜 선택 기능\n6. 운세 카테고리 구분 (건강, 재물, 사랑, 직장 등)\n7. AI 기반 운세 해석 통합\n8. 운세 결과 UI 구현\n9. 알림 기능 (선택적)\n10. 캘린더 뷰 통합 (선택적)",
        "testStrategy": "1. 다양한 사주에 대한 운세 계산 테스트\n2. 날짜 변경에 따른 운세 업데이트 테스트\n3. 카테고리별 운세 정확성 테스트\n4. UI 렌더링 테스트\n5. 알림 기능 테스트",
        "priority": "low",
        "dependencies": [
          6,
          10,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "궁합 분석 기능 구현",
        "description": "두 사람의 사주를 비교하여 궁합을 분석하는 기능을 구현합니다.",
        "details": "1. 두 사람의 사주 정보 입력 UI 구현\n2. 사주 궁합 계산 알고리즘 구현\n3. 오행 상생상극 분석\n4. 천간 지지 합충 분석\n5. 십신 관계 분석\n6. 궁합 점수 계산 시스템\n7. 궁합 결과 시각화 (차트, 그래프)\n8. 상세 궁합 해석 텍스트 생성\n9. AI 기반 궁합 조언 통합\n10. 결과 저장 및 공유 기능",
        "testStrategy": "1. 다양한 사주 조합에 대한 궁합 계산 테스트\n2. 알고리즘 정확성 검증\n3. 시각화 테스트\n4. 해석 품질 평가\n5. 저장 및 공유 기능 테스트",
        "priority": "low",
        "dependencies": [
          6,
          10,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "공유 및 내보내기 기능 구현",
        "description": "리딩 결과를 PDF, 이미지로 저장하고 SNS에 공유하는 기능을 구현합니다.",
        "details": "1. PDF 생성 라이브러리 통합 (jsPDF 등)\n2. 이미지 캡처 기능 구현 (html2canvas 등)\n3. 공유 가능한 링크 생성 시스템\n4. SNS 공유 버튼 구현 (Facebook, Twitter, Instagram 등)\n5. 이메일 전송 기능 구현\n6. 공유 콘텐츠 템플릿 디자인\n7. 공유 통계 추적 (선택적)\n8. QR 코드 생성 기능 (선택적)\n9. 워터마크 추가 기능\n10. 다운로드 옵션 설정 UI",
        "testStrategy": "1. PDF 생성 품질 테스트\n2. 이미지 캡처 품질 테스트\n3. 다양한 SNS 플랫폼 공유 테스트\n4. 이메일 전송 테스트\n5. 다양한 기기 및 브라우저 호환성 테스트",
        "priority": "low",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "타로 카드 학습 모드 구현",
        "description": "사용자가 타로 카드의 의미와 해석을 학습할 수 있는 교육 모드를 구현합니다.",
        "details": "1. 타로 카드 갤러리 UI 구현\n2. 카드별 상세 정보 페이지 구현\n3. 카드 의미 학습 컨텐츠 작성\n4. 카드 상징 및 이미지 해설\n5. 정방향/역방향 의미 설명\n6. 카드 조합 및 관계 설명\n7. 퀴즈 및 학습 게임 기능 (선택적)\n8. 학습 진행 상황 추적\n9. 즐겨찾기 및 노트 기능\n10. 검색 및 필터링 기능",
        "testStrategy": "1. 컨텐츠 정확성 검증\n2. UI 사용성 테스트\n3. 학습 진행 추적 테스트\n4. 퀴즈 기능 테스트\n5. 검색 및 필터링 기능 테스트",
        "priority": "low",
        "dependencies": [
          7,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "사주 용어 사전 및 도움말 구현",
        "description": "사주 관련 용어와 개념을 설명하는 사전 및 도움말 기능을 구현합니다.",
        "details": "1. 사주 용어 데이터베이스 구축\n2. 용어 사전 UI 구현\n3. 검색 및 필터링 기능 구현\n4. 용어별 상세 설명 페이지\n5. 관련 용어 연결 및 네비게이션\n6. 시각적 예시 및 다이어그램\n7. 초보자 가이드 컨텐츠\n8. 자주 묻는 질문 (FAQ) 섹션\n9. 컨텍스트 기반 도움말 팝업\n10. 용어 발음 가이드 (선택적)",
        "testStrategy": "1. 컨텐츠 정확성 검증\n2. 검색 및 필터링 기능 테스트\n3. 네비게이션 사용성 테스트\n4. 도움말 접근성 테스트\n5. 모바일 환경에서의 사용성 테스트",
        "priority": "low",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "성능 최적화 및 사용자 경험 개선",
        "description": "애플리케이션의 성능을 최적화하고 사용자 경험을 개선합니다.",
        "details": "1. 코드 스플리팅 및 지연 로딩 구현\n2. 이미지 최적화 (WebP 포맷, 크기 최적화)\n3. 메모이제이션 및 캐싱 전략 구현\n4. API 응답 최적화\n5. 애니메이션 성능 개선\n6. 로딩 상태 UI 개선\n7. 오류 처리 및 사용자 피드백 개선\n8. 웹 성능 메트릭 모니터링 설정\n9. 접근성 개선 (WCAG 2.1 AA 준수)\n10. 다크 모드 지원 (선택적)",
        "testStrategy": "1. Lighthouse 성능 테스트\n2. 로딩 시간 측정\n3. 메모리 사용량 모니터링\n4. 다양한 네트워크 환경에서의 테스트\n5. 접근성 검사 도구 테스트\n6. 사용자 피드백 수집 및 분석",
        "priority": "medium",
        "dependencies": [
          12,
          13,
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "배포 및 모니터링 시스템 구축",
        "description": "애플리케이션을 프로덕션 환경에 배포하고 모니터링 시스템을 구축합니다.",
        "details": "1. 프론트엔드 배포 설정 (Vercel)\n2. 백엔드 배포 설정 (Railway/Render)\n3. 데이터베이스 프로덕션 설정\n4. CI/CD 파이프라인 구축\n5. 환경 변수 관리\n6. 로깅 시스템 구축\n7. 에러 모니터링 도구 통합 (Sentry 등)\n8. 성능 모니터링 도구 통합\n9. 사용자 분석 도구 통합 (Google Analytics 등)\n10. 백업 및 복구 전략 수립",
        "testStrategy": "1. 배포 프로세스 테스트\n2. 환경 변수 검증\n3. 로깅 및 모니터링 시스템 테스트\n4. 부하 테스트\n5. 장애 복구 테스트\n6. 보안 취약점 스캔",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          19
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-10-27T15:16:35.981Z",
      "updated": "2025-10-27T15:17:18.105Z",
      "description": "Tasks for master context"
    }
  }
}